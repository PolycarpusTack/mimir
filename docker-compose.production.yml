# Mimir Production Environment - Docker Compose
# Production-ready setup with security, performance optimization, and monitoring

version: '3.8'

services:
  # ===================================
  # Database Services
  # ===================================
  postgres:
    image: postgres:16-alpine
    container_name: mimir_postgres_prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
      # Production optimizations
      POSTGRES_SHARED_BUFFERS: ${POSTGRES_SHARED_BUFFERS:-256MB}
      POSTGRES_EFFECTIVE_CACHE_SIZE: ${POSTGRES_EFFECTIVE_CACHE_SIZE:-1GB}
      POSTGRES_MAINTENANCE_WORK_MEM: ${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}
      POSTGRES_WAL_BUFFERS: ${POSTGRES_WAL_BUFFERS:-16MB}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./scripts/postgres/init:/docker-entrypoint-initdb.d:ro
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./logs/postgres:/var/log/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - mimir_backend_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Connection pooler with production settings
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: mimir_pgbouncer_prod
    restart: always
    environment:
      DATABASES_HOST: postgres
      DATABASES_PORT: 5432
      DATABASES_USER: ${POSTGRES_USER}
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASES_DBNAME: ${POSTGRES_DB}
      POOL_MODE: transaction
      MAX_CLIENT_CONN: ${PGBOUNCER_MAX_CLIENT_CONN:-500}
      DEFAULT_POOL_SIZE: ${PGBOUNCER_DEFAULT_POOL_SIZE:-100}
      SERVER_RESET_QUERY: DISCARD ALL
      SERVER_CHECK_DELAY: 30
      LOG_CONNECTIONS: 0
      LOG_DISCONNECTIONS: 0
      SERVER_LIFETIME: ${PGBOUNCER_SERVER_LIFETIME:-3600}
      SERVER_IDLE_TIMEOUT: ${PGBOUNCER_SERVER_IDLE_TIMEOUT:-600}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./config/pgbouncer:/etc/pgbouncer:ro
      - ./logs/pgbouncer:/var/log/pgbouncer
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    networks:
      - mimir_backend_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===================================
  # Cache and Message Queue
  # ===================================
  redis:
    image: redis:7-alpine
    container_name: mimir_redis_prod
    restart: always
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory ${REDIS_MAX_MEMORY:-1gb}
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_prod_data:/data
      - ./config/redis/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
      - ./logs/redis:/var/log/redis
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    networks:
      - mimir_backend_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===================================
  # Application Services
  # ===================================
  mimir-api:
    image: ${REGISTRY:-localhost:5000}/mimir:api-${VERSION:-latest}
    container_name: mimir_api_prod
    restart: always
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - WORKERS=${API_WORKERS:-4}
      - MAX_REQUESTS=${API_MAX_REQUESTS:-1000}
      - MAX_REQUESTS_JITTER=${API_MAX_REQUESTS_JITTER:-100}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    volumes:
      - ./logs/api:/app/logs
      - ./config.json:/app/config.json:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: ${API_REPLICAS:-2}
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - mimir_frontend_network
      - mimir_backend_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  mimir-web:
    image: ${REGISTRY:-localhost:5000}/mimir:${VERSION:-latest}
    container_name: mimir_web_prod
    restart: always
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./logs/web:/app/logs
      - ./static:/app/static:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: ${WEB_REPLICAS:-2}
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - mimir_frontend_network
      - mimir_backend_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  mimir-worker:
    image: ${REGISTRY:-localhost:5000}/mimir:worker-${VERSION:-latest}
    container_name: mimir_worker_prod
    restart: always
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-4}
      - WORKER_MAX_TASKS_PER_CHILD=${WORKER_MAX_TASKS_PER_CHILD:-1000}
      - WORKER_PREFETCH_MULTIPLIER=${WORKER_PREFETCH_MULTIPLIER:-1}
    volumes:
      - ./logs/worker:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "celery_app", "inspect", "ping", "-d", "celery@$HOSTNAME"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    deploy:
      replicas: ${WORKER_REPLICAS:-3}
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 120s
    networks:
      - mimir_backend_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  mimir-analytics:
    image: ${REGISTRY:-localhost:5000}/mimir:analytics-${VERSION:-latest}
    container_name: mimir_analytics_prod
    restart: always
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ANALYTICS_PORT=5001
    volumes:
      - ./logs/analytics:/app/logs
      - ./reports:/app/reports
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    deploy:
      replicas: ${ANALYTICS_REPLICAS:-1}
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 120s
    networks:
      - mimir_frontend_network
      - mimir_backend_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # ===================================
  # Load Balancer
  # ===================================
  nginx:
    image: nginx:alpine
    container_name: mimir_nginx_prod
    restart: always
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - ./static:/var/www/static:ro
    depends_on:
      - mimir-api
      - mimir-web
      - mimir-analytics
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    networks:
      - mimir_frontend_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/mimir}/postgres
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/mimir}/redis

networks:
  mimir_frontend_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: mimir-frontend
  mimir_backend_network:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.bridge.name: mimir-backend