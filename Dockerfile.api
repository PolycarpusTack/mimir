# Mimir API Service - FastAPI Production Dockerfile
# Optimized for API workloads with minimal dependencies

ARG PYTHON_VERSION=3.11.7
ARG ALPINE_VERSION=3.19

# ================================
# Stage 1: Build Dependencies
# ================================
FROM python:${PYTHON_VERSION}-alpine${ALPINE_VERSION} AS builder

# Install build dependencies
RUN apk add --no-cache \
    gcc \
    musl-dev \
    postgresql-dev \
    libffi-dev \
    openssl-dev \
    linux-headers

WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements_api.txt ./
RUN pip install --no-cache-dir --user --upgrade pip setuptools wheel && \
    pip install --no-cache-dir --user -r requirements_api.txt

# ================================
# Stage 2: Production Runtime
# ================================
FROM python:${PYTHON_VERSION}-alpine${ALPINE_VERSION} AS production

# Security: Create non-root user
RUN addgroup -g 1001 -S mimir && \
    adduser -S -D -u 1001 -G mimir mimir

# Install only runtime dependencies
RUN apk add --no-cache \
    postgresql-client \
    libpq \
    libffi \
    openssl \
    ca-certificates \
    curl \
    dumb-init

# Copy Python packages from builder
COPY --from=builder /root/.local /home/mimir/.local

# Set up environment
ENV PATH=/home/mimir/.local/bin:$PATH \
    PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    ENVIRONMENT=production \
    PYTHONHASHSEED=random

# Create application directories
WORKDIR /app
RUN mkdir -p /app/logs && \
    chown -R mimir:mimir /app

# Copy only API-related files
COPY --chown=mimir:mimir api/ ./api/
COPY --chown=mimir:mimir auth/ ./auth/
COPY --chown=mimir:mimir services/ ./services/
COPY --chown=mimir:mimir db_adapter.py db_manager_postgres.py config.json ./

# Remove unnecessary files
RUN find /app -name "__pycache__" -type d -exec rm -rf {} + || true && \
    find /app -name "*.pyc" -delete || true

# Set proper permissions
RUN find /app -type f -name "*.py" -exec chmod 644 {} \; && \
    find /app -type d -exec chmod 755 {} \;

# Switch to non-root user
USER mimir

# Health check for API service
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose API port
EXPOSE 8000

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start FastAPI with Uvicorn
CMD ["uvicorn", "api.app:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]