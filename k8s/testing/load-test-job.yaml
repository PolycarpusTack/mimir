# Load testing job for Mimir services using Locust
apiVersion: v1
kind: ConfigMap
metadata:
  name: locust-config
  namespace: mimir
  labels:
    app.kubernetes.io/name: locust
    app.kubernetes.io/component: load-test
    app.kubernetes.io/part-of: mimir
data:
  locustfile.py: |
    import time
    import random
    from locust import HttpUser, task, between
    
    class MimirUser(HttpUser):
        wait_time = between(1, 3)
        
        def on_start(self):
            # Login or setup
            self.client.headers['Authorization'] = 'Bearer test-token'
        
        @task(10)
        def view_articles(self):
            """View article list"""
            self.client.get("/api/articles", name="/api/articles")
        
        @task(5)
        def search_articles(self):
            """Search for articles"""
            search_terms = ["technology", "business", "ai", "news", "startup"]
            term = random.choice(search_terms)
            self.client.get(f"/api/search?q={term}", name="/api/search")
        
        @task(3)
        def view_article_detail(self):
            """View specific article"""
            article_id = random.randint(1, 1000)
            self.client.get(f"/api/articles/{article_id}", name="/api/articles/[id]")
        
        @task(2)
        def view_analytics(self):
            """View analytics dashboard"""
            self.client.get("/analytics/dashboard", name="/analytics/dashboard")
        
        @task(1)
        def create_saved_search(self):
            """Create a saved search"""
            data = {
                "name": f"Test Search {random.randint(1, 1000)}",
                "query": random.choice(["tech", "news", "ai"]),
                "filters": {"source": "all", "date_range": "7d"}
            }
            self.client.post("/api/saved-searches", json=data, name="/api/saved-searches")
    
    class MimirAPIUser(HttpUser):
        wait_time = between(0.5, 2)
        host = "http://mimir-api-service:8000"
        
        def on_start(self):
            # API authentication
            response = self.client.post("/api/auth/login", json={
                "username": "test_user",
                "password": "test_password"
            })
            if response.status_code == 200:
                self.token = response.json().get("access_token")
                self.client.headers['Authorization'] = f'Bearer {self.token}'
        
        @task(20)
        def api_get_articles(self):
            """API: Get articles with pagination"""
            page = random.randint(1, 10)
            per_page = random.choice([10, 20, 50])
            self.client.get(f"/api/v1/articles?page={page}&per_page={per_page}", 
                          name="/api/v1/articles")
        
        @task(10)
        def api_search(self):
            """API: Full-text search"""
            queries = ["artificial intelligence", "climate change", "technology trends"]
            self.client.get(f"/api/v1/search?q={random.choice(queries)}", 
                          name="/api/v1/search")
        
        @task(5)
        def api_get_sources(self):
            """API: Get news sources"""
            self.client.get("/api/v1/sources", name="/api/v1/sources")
        
        @task(3)
        def api_get_analytics(self):
            """API: Get analytics data"""
            self.client.get("/api/v1/analytics/trending", name="/api/v1/analytics/trending")
        
        @task(2)
        def api_webhook_test(self):
            """API: Webhook endpoint test"""
            data = {
                "event": "article.created",
                "data": {
                    "title": f"Test Article {time.time()}",
                    "source": "test"
                }
            }
            self.client.post("/api/v1/webhooks/test", json=data, 
                           name="/api/v1/webhooks/test")
---
apiVersion: batch/v1
kind: Job
metadata:
  name: mimir-load-test
  namespace: mimir
  labels:
    app.kubernetes.io/name: locust
    app.kubernetes.io/component: load-test
    app.kubernetes.io/part-of: mimir
spec:
  parallelism: 1
  completions: 1
  backoffLimit: 3
  activeDeadlineSeconds: 3600  # 1 hour maximum
  template:
    metadata:
      labels:
        app.kubernetes.io/name: locust
        app.kubernetes.io/component: load-test
    spec:
      restartPolicy: OnFailure
      containers:
      - name: locust-master
        image: locustio/locust:2.17.0
        imagePullPolicy: IfNotPresent
        command: 
        - locust
        - --master
        - --expect-workers=3
        - --host=http://mimir-nginx-service
        - --users=100
        - --spawn-rate=10
        - --run-time=10m
        - --headless
        - --html=/reports/report.html
        - --csv=/reports/results
        ports:
        - containerPort: 5557
          name: master-bind
        - containerPort: 8089
          name: web
        volumeMounts:
        - name: locust-scripts
          mountPath: /home/locust
        - name: reports
          mountPath: /reports
        resources:
          requests:
            memory: "256Mi"
            cpu: "500m"
          limits:
            memory: "512Mi"
            cpu: "1"
      - name: locust-worker-1
        image: locustio/locust:2.17.0
        imagePullPolicy: IfNotPresent
        command:
        - locust
        - --worker
        - --master-host=localhost
        volumeMounts:
        - name: locust-scripts
          mountPath: /home/locust
        resources:
          requests:
            memory: "256Mi"
            cpu: "500m"
          limits:
            memory: "512Mi"
            cpu: "1"
      - name: locust-worker-2
        image: locustio/locust:2.17.0
        imagePullPolicy: IfNotPresent
        command:
        - locust
        - --worker
        - --master-host=localhost
        volumeMounts:
        - name: locust-scripts
          mountPath: /home/locust
        resources:
          requests:
            memory: "256Mi"
            cpu: "500m"
          limits:
            memory: "512Mi"
            cpu: "1"
      - name: locust-worker-3
        image: locustio/locust:2.17.0
        imagePullPolicy: IfNotPresent
        command:
        - locust
        - --worker
        - --master-host=localhost
        volumeMounts:
        - name: locust-scripts
          mountPath: /home/locust
        resources:
          requests:
            memory: "256Mi"
            cpu: "500m"
          limits:
            memory: "512Mi"
            cpu: "1"
      volumes:
      - name: locust-scripts
        configMap:
          name: locust-config
      - name: reports
        emptyDir: {}
---
# Alternative: Distributed Locust deployment for larger scale tests
apiVersion: v1
kind: Service
metadata:
  name: locust-master
  namespace: mimir
  labels:
    app.kubernetes.io/name: locust
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  ports:
  - port: 5557
    targetPort: 5557
    protocol: TCP
    name: master-bind
  - port: 8089
    targetPort: 8089
    protocol: TCP
    name: web
  selector:
    app.kubernetes.io/name: locust
    app.kubernetes.io/component: master
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: locust-master
  namespace: mimir
  labels:
    app.kubernetes.io/name: locust
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: locust
      app.kubernetes.io/component: master
  template:
    metadata:
      labels:
        app.kubernetes.io/name: locust
        app.kubernetes.io/component: master
    spec:
      containers:
      - name: locust
        image: locustio/locust:2.17.0
        imagePullPolicy: IfNotPresent
        command:
        - locust
        - --master
        - --host=http://mimir-nginx-service
        ports:
        - containerPort: 5557
          name: master-bind
        - containerPort: 8089
          name: web
        volumeMounts:
        - name: locust-scripts
          mountPath: /home/locust
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "2"
      volumes:
      - name: locust-scripts
        configMap:
          name: locust-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: locust-worker
  namespace: mimir
  labels:
    app.kubernetes.io/name: locust
    app.kubernetes.io/component: worker
spec:
  replicas: 5
  selector:
    matchLabels:
      app.kubernetes.io/name: locust
      app.kubernetes.io/component: worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: locust
        app.kubernetes.io/component: worker
    spec:
      containers:
      - name: locust
        image: locustio/locust:2.17.0
        imagePullPolicy: IfNotPresent
        command:
        - locust
        - --worker
        - --master-host=locust-master
        volumeMounts:
        - name: locust-scripts
          mountPath: /home/locust
        resources:
          requests:
            memory: "512Mi"
            cpu: "1"
          limits:
            memory: "1Gi"
            cpu: "2"
      volumes:
      - name: locust-scripts
        configMap:
          name: locust-config