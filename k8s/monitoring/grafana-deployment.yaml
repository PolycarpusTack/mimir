# Grafana Deployment for Mimir Monitoring
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: mimir-monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: false
      jsonData:
        timeInterval: 15s
    - name: PostgreSQL
      type: postgres
      access: proxy
      url: postgres-primary-service.mimir:5432
      database: mimir
      user: $POSTGRES_USER
      secureJsonData:
        password: $POSTGRES_PASSWORD
      jsonData:
        sslmode: 'disable'
        maxOpenConns: 0
        maxIdleConns: 2
        connMaxLifetime: 14400
        postgresVersion: 1600
        timescaledb: false
      editable: false
    - name: Elasticsearch
      type: elasticsearch
      access: proxy
      url: http://elasticsearch:9200
      database: "[mimir-]YYYY.MM.DD"
      jsonData:
        interval: Daily
        timeField: "@timestamp"
        esVersion: "7.10+"
        logMessageField: message
        logLevelField: level
      editable: false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-providers
  namespace: mimir-monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'Mimir Dashboards'
      orgId: 1
      folder: 'Mimir'
      type: file
      disableDeletion: true
      updateIntervalSeconds: 10
      allowUiUpdates: false
      options:
        path: /var/lib/grafana/dashboards/mimir
    - name: 'Infrastructure Dashboards'
      orgId: 1
      folder: 'Infrastructure'
      type: file
      disableDeletion: true
      updateIntervalSeconds: 10
      allowUiUpdates: false
      options:
        path: /var/lib/grafana/dashboards/infrastructure
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: mimir-monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: mimir-monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/component: monitoring
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.0.3
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: web
          protocol: TCP
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: grafana-admin
              key: username
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-admin
              key: password
        - name: GF_SERVER_ROOT_URL
          value: "https://grafana.example.com"
        - name: GF_SERVER_SERVE_FROM_SUB_PATH
          value: "false"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "false"
        - name: GF_AUTH_BASIC_ENABLED
          value: "true"
        - name: GF_ANALYTICS_REPORTING_ENABLED
          value: "false"
        - name: GF_ANALYTICS_CHECK_FOR_UPDATES
          value: "false"
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: mimir-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mimir-secrets
              key: POSTGRES_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: web
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: web
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: storage
          mountPath: /var/lib/grafana
        - name: datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: dashboard-providers
          mountPath: /etc/grafana/provisioning/dashboards
        - name: dashboards-mimir
          mountPath: /var/lib/grafana/dashboards/mimir
        - name: dashboards-infrastructure
          mountPath: /var/lib/grafana/dashboards/infrastructure
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: grafana-storage
      - name: datasources
        configMap:
          name: grafana-datasources
      - name: dashboard-providers
        configMap:
          name: grafana-dashboard-providers
      - name: dashboards-mimir
        configMap:
          name: grafana-dashboards-mimir
      - name: dashboards-infrastructure
        configMap:
          name: grafana-dashboards-infrastructure
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: mimir-monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: web
    protocol: TCP
    name: web
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin
  namespace: mimir-monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
type: Opaque
stringData:
  username: admin
  password: CHANGE_THIS_STRONG_PASSWORD
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana
  namespace: mimir-monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - grafana.example.com
    secretName: grafana-tls
  rules:
  - host: grafana.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000