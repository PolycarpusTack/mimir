apiVersion: v1
kind: Service
metadata:
  name: mimir-web-service
  namespace: mimir
  labels:
    app.kubernetes.io/name: mimir-web
    app.kubernetes.io/component: web
    app.kubernetes.io/part-of: mimir
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: 5000
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: mimir-web
    app.kubernetes.io/component: web
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mimir-web
  namespace: mimir
  labels:
    app.kubernetes.io/name: mimir-web
    app.kubernetes.io/component: web
    app.kubernetes.io/part-of: mimir
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir-web
      app.kubernetes.io/component: web
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mimir-web
        app.kubernetes.io/component: web
        app.kubernetes.io/part-of: mimir
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/metrics"
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
    spec:
      serviceAccountName: mimir-web
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      initContainers:
      - name: wait-for-dependencies
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - |
          until nc -z postgres-service 5432 && nc -z redis-service 6379; do
            echo "Waiting for dependencies..."
            sleep 2
          done
          echo "Dependencies are ready"
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "64Mi"
            cpu: "50m"
      containers:
      - name: mimir-web
        image: {{ .Values.image.registry }}/mimir:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
        - python
        - web_interface.py
        ports:
        - containerPort: 5000
          name: http
          protocol: TCP
        envFrom:
        - configMapRef:
            name: mimir-config
        - secretRef:
            name: mimir-secrets
        env:
        - name: SERVICE_TYPE
          value: "web"
        - name: FLASK_ENV
          value: "production"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
            httpHeaders:
            - name: User-Agent
              value: Kubernetes-Health-Check
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
            httpHeaders:
            - name: User-Agent
              value: Kubernetes-Health-Check
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: static
          mountPath: /app/static
        - name: uploads
          mountPath: /var/uploads
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: static
        emptyDir: {}
      - name: uploads
        emptyDir:
          sizeLimit: 5Gi
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: mimir-web
            app.kubernetes.io/component: web
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - mimir-web
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mimir-web
  namespace: mimir
  labels:
    app.kubernetes.io/name: mimir-web
    app.kubernetes.io/component: web
    app.kubernetes.io/part-of: mimir
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mimir-web-pdb
  namespace: mimir
  labels:
    app.kubernetes.io/name: mimir-web
    app.kubernetes.io/component: web
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir-web
      app.kubernetes.io/component: web