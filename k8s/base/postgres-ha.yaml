# PostgreSQL High Availability with Streaming Replication
# Primary-Standby setup with automatic failover

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-ha-config
  namespace: mimir
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: mimir
data:
  postgresql.conf: |
    # PostgreSQL HA Configuration
    
    # Replication Settings
    wal_level = replica
    max_wal_senders = 10
    max_replication_slots = 10
    wal_keep_segments = 64
    hot_standby = on
    hot_standby_feedback = on
    
    # Archive Settings
    archive_mode = on
    archive_command = 'test ! -f /var/lib/postgresql/archive/%f && cp %p /var/lib/postgresql/archive/%f'
    restore_command = 'cp /var/lib/postgresql/archive/%f %p'
    
    # Connection Settings
    max_connections = 200
    superuser_reserved_connections = 3
    
    # Memory Settings
    shared_buffers = 1GB
    effective_cache_size = 3GB
    maintenance_work_mem = 256MB
    work_mem = 32MB
    
    # Checkpoint Settings
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    checkpoint_segments = 32
    
    # Query Tuning
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Monitoring
    shared_preload_libraries = 'pg_stat_statements'
    track_activities = on
    track_counts = on
    track_io_timing = on
    track_functions = all
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 0
    log_autovacuum_min_duration = 0
    
  pg_hba.conf: |
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    local   all             all                                     trust
    host    all             all             127.0.0.1/32            trust
    host    all             all             ::1/128                 trust
    host    all             all             0.0.0.0/0               md5
    host    replication     replicator      0.0.0.0/0               md5
    
  recovery.conf.template: |
    standby_mode = 'on'
    primary_conninfo = 'host=postgres-primary-service port=5432 user=replicator password=${REPLICATION_PASSWORD}'
    trigger_file = '/tmp/postgresql.trigger.5432'
    recovery_target_timeline = 'latest'
    
  setup-replication.sh: |
    #!/bin/bash
    set -e
    
    if [ "$POSTGRES_ROLE" = "primary" ]; then
        echo "Setting up primary database..."
        
        # Create replication user if it doesn't exist
        psql -U "$POSTGRES_USER" -d "$POSTGRES_DB" <<-EOSQL
            DO \$\$
            BEGIN
                IF NOT EXISTS (SELECT FROM pg_user WHERE usename = 'replicator') THEN
                    CREATE USER replicator WITH REPLICATION ENCRYPTED PASSWORD '${REPLICATION_PASSWORD}';
                END IF;
            END
            \$\$;
            
            -- Create replication slot
            SELECT * FROM pg_create_physical_replication_slot('replica_slot', true)
            WHERE NOT EXISTS (
                SELECT * FROM pg_replication_slots WHERE slot_name = 'replica_slot'
            );
        EOSQL
        
        echo "Primary database setup complete"
        
    elif [ "$POSTGRES_ROLE" = "standby" ]; then
        echo "Setting up standby database..."
        
        # Wait for primary to be ready
        until PGPASSWORD="$POSTGRES_PASSWORD" psql -h postgres-primary-service -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c '\q'; do
            echo "Waiting for primary database..."
            sleep 5
        done
        
        # Stop PostgreSQL
        pg_ctl -D "$PGDATA" -m fast -w stop || true
        
        # Clear data directory
        rm -rf "$PGDATA"/*
        
        # Perform base backup from primary
        PGPASSWORD="$REPLICATION_PASSWORD" pg_basebackup \
            -h postgres-primary-service \
            -D "$PGDATA" \
            -U replicator \
            -v \
            -P \
            -X stream \
            -c fast
        
        # Create recovery configuration
        envsubst < /etc/postgresql/recovery.conf.template > "$PGDATA/recovery.conf"
        
        # Start PostgreSQL
        pg_ctl -D "$PGDATA" -w start
        
        echo "Standby database setup complete"
    fi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-primary-service
  namespace: mimir
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/role: primary
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/role: primary
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-standby-service
  namespace: mimir
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/role: standby
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/role: standby
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-read-service
  namespace: mimir
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-primary
  namespace: mimir
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/role: primary
spec:
  serviceName: postgres-primary-service
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/component: database
      app.kubernetes.io/role: primary
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
        app.kubernetes.io/role: primary
        app.kubernetes.io/part-of: mimir
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - postgres
              - key: app.kubernetes.io/role
                operator: In
                values:
                - standby
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-role.kubernetes.io/database
                operator: In
                values:
                - "true"
      containers:
      - name: postgres
        image: postgres:16-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        env:
        - name: POSTGRES_ROLE
          value: "primary"
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: mimir-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: mimir-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mimir-secrets
              key: POSTGRES_PASSWORD
        - name: REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-replication-secret
              key: REPLICATION_PASSWORD
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --locale=en_US.utf8"
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-archive
          mountPath: /var/lib/postgresql/archive
        - name: postgres-config
          mountPath: /etc/postgresql
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                sleep 10
                /etc/postgresql/setup-replication.sh
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-ha-config
          defaultMode: 0755
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi
  - metadata:
      name: postgres-archive
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: standard
      resources:
        requests:
          storage: 200Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-standby
  namespace: mimir
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/role: standby
spec:
  serviceName: postgres-standby-service
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/component: database
      app.kubernetes.io/role: standby
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
        app.kubernetes.io/role: standby
        app.kubernetes.io/part-of: mimir
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - postgres
              - key: app.kubernetes.io/role
                operator: In
                values:
                - primary
                - standby
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: topology.kubernetes.io/zone
                operator: NotIn
                values:
                - "{{ .Values.primaryZone }}"
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: postgres
            app.kubernetes.io/role: standby
      containers:
      - name: postgres
        image: postgres:16-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        env:
        - name: POSTGRES_ROLE
          value: "standby"
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: mimir-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: mimir-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mimir-secrets
              key: POSTGRES_PASSWORD
        - name: REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-replication-secret
              key: REPLICATION_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              pg_isready -U $(POSTGRES_USER) -d $(POSTGRES_DB) && \
              psql -U $(POSTGRES_USER) -d $(POSTGRES_DB) -c "SELECT pg_is_in_recovery();" | grep -q 't'
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                sleep 30
                /etc/postgresql/setup-replication.sh
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-ha-config
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-replication-secret
  namespace: mimir
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
type: Opaque
stringData:
  REPLICATION_PASSWORD: "CHANGE_THIS_STRONG_REPLICATION_PASSWORD"