# Application Tracing Integration Guide and Examples
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tracing-instrumentation-guide
  namespace: mimir
  labels:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/component: tracing
data:
  python-opentelemetry.py: |
    """
    OpenTelemetry tracing configuration for Mimir Python applications
    """
    import os
    import logging
    from typing import Optional, Dict, Any
    
    from opentelemetry import trace
    from opentelemetry.exporter.jaeger.thrift import JaegerExporter
    from opentelemetry.sdk.trace import TracerProvider
    from opentelemetry.sdk.trace.export import BatchSpanProcessor
    from opentelemetry.sdk.resources import SERVICE_NAME, SERVICE_VERSION, Resource
    from opentelemetry.instrumentation.auto_instrumentation import sitecustomize
    from opentelemetry.instrumentation.fastapi import FastAPIInstrumentor
    from opentelemetry.instrumentation.requests import RequestsInstrumentor
    from opentelemetry.instrumentation.sqlalchemy import SQLAlchemyInstrumentor
    from opentelemetry.instrumentation.redis import RedisInstrumentor
    from opentelemetry.instrumentation.celery import CeleryInstrumentor
    from opentelemetry.instrumentation.logging import LoggingInstrumentor
    from opentelemetry.propagate import set_global_textmap
    from opentelemetry.propagators.jaeger import JaegerPropagator
    from opentelemetry.propagators.b3 import B3MultiFormat
    from opentelemetry.propagators.composite import CompositeHTTPPropagator
    
    logger = logging.getLogger(__name__)
    
    def setup_tracing(
        service_name: str,
        service_version: str = "1.0.0",
        jaeger_endpoint: str = None,
        environment: str = "production",
        sample_rate: float = 0.1
    ) -> trace.Tracer:
        """
        Setup OpenTelemetry tracing for the application
        
        Args:
            service_name: Name of the service
            service_version: Version of the service
            jaeger_endpoint: Jaeger collector endpoint
            environment: Environment name
            sample_rate: Sampling rate (0.0 to 1.0)
        
        Returns:
            Configured tracer instance
        """
        
        # Default Jaeger endpoint
        if jaeger_endpoint is None:
            jaeger_endpoint = os.getenv(
                "JAEGER_ENDPOINT", 
                "http://jaeger-collector.mimir-tracing:14268/api/traces"
            )
        
        # Create resource with service metadata
        resource = Resource.create({
            SERVICE_NAME: service_name,
            SERVICE_VERSION: service_version,
            "service.environment": environment,
            "service.namespace": "mimir",
            "deployment.environment": environment,
            "k8s.cluster.name": os.getenv("CLUSTER_NAME", "mimir-prod"),
            "k8s.pod.name": os.getenv("HOSTNAME", "unknown"),
            "k8s.namespace.name": os.getenv("POD_NAMESPACE", "mimir"),
        })
        
        # Configure tracer provider
        tracer_provider = TracerProvider(
            resource=resource,
            sampler=trace.sampling.TraceIdRatioBased(sample_rate)
        )
        
        # Configure Jaeger exporter
        jaeger_exporter = JaegerExporter(
            endpoint=jaeger_endpoint,
            # Additional headers for authentication if needed
            # headers={"Authorization": "Bearer token"}
        )
        
        # Add batch span processor
        span_processor = BatchSpanProcessor(
            jaeger_exporter,
            max_queue_size=2048,
            max_export_batch_size=512,
            export_timeout_millis=30000,
            schedule_delay_millis=5000
        )
        tracer_provider.add_span_processor(span_processor)
        
        # Set global tracer provider
        trace.set_tracer_provider(tracer_provider)
        
        # Configure propagators for distributed tracing
        set_global_textmap(
            CompositeHTTPPropagator([
                JaegerPropagator(),
                B3MultiFormat(),
            ])
        )
        
        # Auto-instrument common libraries
        setup_auto_instrumentation()
        
        logger.info(f"Tracing initialized for {service_name} v{service_version}")
        
        return trace.get_tracer(__name__)
    
    def setup_auto_instrumentation():
        """Setup automatic instrumentation for common libraries"""
        
        # HTTP requests instrumentation
        RequestsInstrumentor().instrument()
        
        # Database instrumentation
        SQLAlchemyInstrumentor().instrument()
        
        # Redis instrumentation
        RedisInstrumentor().instrument()
        
        # Celery instrumentation
        CeleryInstrumentor().instrument()
        
        # Logging instrumentation (correlates logs with traces)
        LoggingInstrumentor().instrument(set_logging_format=True)
    
    def instrument_fastapi(app):
        """Instrument FastAPI application"""
        FastAPIInstrumentor.instrument_app(
            app,
            excluded_urls="health,metrics,docs,openapi.json"
        )
        return app
    
    # Custom decorators for manual instrumentation
    def trace_function(name: str = None, attributes: Dict[str, Any] = None):
        """Decorator to trace function calls"""
        def decorator(func):
            def wrapper(*args, **kwargs):
                tracer = trace.get_tracer(__name__)
                span_name = name or f"{func.__module__}.{func.__name__}"
                
                with tracer.start_as_current_span(span_name) as span:
                    # Add custom attributes
                    if attributes:
                        for key, value in attributes.items():
                            span.set_attribute(key, str(value))
                    
                    # Add function metadata
                    span.set_attribute("function.name", func.__name__)
                    span.set_attribute("function.module", func.__module__)
                    span.set_attribute("function.args_count", len(args))
                    span.set_attribute("function.kwargs_count", len(kwargs))
                    
                    try:
                        result = func(*args, **kwargs)
                        span.set_status(trace.Status(trace.StatusCode.OK))
                        return result
                    except Exception as e:
                        span.record_exception(e)
                        span.set_status(
                            trace.Status(
                                trace.StatusCode.ERROR, 
                                str(e)
                            )
                        )
                        raise
            
            return wrapper
        return decorator
    
    # Context manager for custom spans
    class traced_operation:
        """Context manager for tracing operations"""
        
        def __init__(self, name: str, attributes: Dict[str, Any] = None):
            self.name = name
            self.attributes = attributes or {}
            self.span = None
            self.tracer = trace.get_tracer(__name__)
        
        def __enter__(self):
            self.span = self.tracer.start_span(self.name)
            self.span.__enter__()
            
            # Add custom attributes
            for key, value in self.attributes.items():
                self.span.set_attribute(key, str(value))
            
            return self.span
        
        def __exit__(self, exc_type, exc_val, exc_tb):
            if exc_type is not None:
                self.span.record_exception(exc_val)
                self.span.set_status(
                    trace.Status(
                        trace.StatusCode.ERROR,
                        str(exc_val)
                    )
                )
            else:
                self.span.set_status(trace.Status(trace.StatusCode.OK))
            
            self.span.__exit__(exc_type, exc_val, exc_tb)
    
    # Utility functions
    def get_current_trace_id() -> Optional[str]:
        """Get current trace ID for logging correlation"""
        span = trace.get_current_span()
        if span and span.get_span_context().is_valid:
            return format(span.get_span_context().trace_id, "032x")
        return None
    
    def get_current_span_id() -> Optional[str]:
        """Get current span ID for logging correlation"""
        span = trace.get_current_span()
        if span and span.get_span_context().is_valid:
            return format(span.get_span_context().span_id, "016x")
        return None
    
    def add_trace_to_logs():
        """Add trace and span IDs to log records"""
        old_factory = logging.getLogRecordFactory()
        
        def record_factory(*args, **kwargs):
            record = old_factory(*args, **kwargs)
            record.trace_id = get_current_trace_id()
            record.span_id = get_current_span_id()
            return record
        
        logging.setLogRecordFactory(record_factory)
    
    # Example usage
    if __name__ == "__main__":
        # Setup tracing
        tracer = setup_tracing(
            service_name="mimir-api",
            service_version="1.0.0",
            environment="production",
            sample_rate=0.1
        )
        
        # Add trace IDs to logs
        add_trace_to_logs()
        
        # Example function with tracing
        @trace_function("custom.operation", {"operation.type": "data_processing"})
        def process_data(data):
            with traced_operation("data.validation", {"data.size": len(data)}):
                # Validate data
                pass
            
            with traced_operation("data.transformation"):
                # Transform data
                pass
            
            return data
  
  fastapi-tracing-example.py: |
    """
    FastAPI application with OpenTelemetry tracing
    """
    from fastapi import FastAPI, Request, Response
    from opentelemetry import trace
    from tracing_setup import setup_tracing, instrument_fastapi, traced_operation
    import logging
    
    # Setup tracing
    tracer = setup_tracing(
        service_name="mimir-api",
        service_version="1.0.0"
    )
    
    # Create FastAPI app
    app = FastAPI(title="Mimir API", version="1.0.0")
    
    # Instrument FastAPI
    instrument_fastapi(app)
    
    # Logger
    logger = logging.getLogger(__name__)
    
    @app.middleware("http")
    async def tracing_middleware(request: Request, call_next):
        """Add custom tracing information to requests"""
        
        # Get current span
        span = trace.get_current_span()
        
        # Add custom attributes
        span.set_attribute("http.user_agent", request.headers.get("user-agent", ""))
        span.set_attribute("http.client_ip", request.client.host)
        
        # Add user context if available
        user_id = request.headers.get("x-user-id")
        if user_id:
            span.set_attribute("user.id", user_id)
        
        # Process request
        response = await call_next(request)
        
        # Add response attributes
        span.set_attribute("http.response.size", 
                          response.headers.get("content-length", 0))
        
        return response
    
    @app.get("/api/articles")
    async def get_articles(limit: int = 10, offset: int = 0):
        """Get articles with tracing"""
        
        with traced_operation("database.query", {
            "db.operation": "SELECT",
            "db.table": "articles",
            "query.limit": limit,
            "query.offset": offset
        }):
            # Simulate database query
            articles = fetch_articles_from_db(limit, offset)
        
        with traced_operation("data.serialization", {
            "data.count": len(articles)
        }):
            # Serialize data
            result = [article.dict() for article in articles]
        
        return {"articles": result, "total": len(result)}
    
    def fetch_articles_from_db(limit: int, offset: int):
        """Simulated database function"""
        # This would be automatically traced by SQLAlchemy instrumentation
        pass
  
  celery-tracing-setup.py: |
    """
    Celery task tracing configuration
    """
    from celery import Celery
    from celery.signals import task_prerun, task_postrun, task_failure
    from opentelemetry import trace
    from tracing_setup import setup_tracing, traced_operation
    import logging
    
    # Setup tracing for Celery worker
    tracer = setup_tracing(
        service_name="mimir-worker",
        service_version="1.0.0"
    )
    
    logger = logging.getLogger(__name__)
    
    # Celery app
    app = Celery('mimir')
    
    @task_prerun.connect
    def task_prerun_handler(sender=None, task_id=None, task=None, args=None, kwargs=None, **kwds):
        """Start span for task execution"""
        span_name = f"celery.task.{task.name if task else 'unknown'}"
        
        # Start span and store in task context
        span = tracer.start_span(span_name)
        span.set_attribute("celery.task.id", task_id)
        span.set_attribute("celery.task.name", task.name if task else "unknown")
        span.set_attribute("celery.task.args_count", len(args) if args else 0)
        span.set_attribute("celery.task.kwargs_count", len(kwargs) if kwargs else 0)
        
        # Store span in task context (this is a simplified example)
        if hasattr(task, 'request'):
            task.request.span = span
    
    @task_postrun.connect
    def task_postrun_handler(sender=None, task_id=None, task=None, retval=None, state=None, **kwds):
        """End span for task execution"""
        if hasattr(task, 'request') and hasattr(task.request, 'span'):
            span = task.request.span
            span.set_attribute("celery.task.state", state)
            span.set_status(trace.Status(trace.StatusCode.OK))
            span.end()
    
    @task_failure.connect
    def task_failure_handler(sender=None, task_id=None, exception=None, traceback=None, einfo=None, **kwds):
        """Handle task failure in span"""
        if hasattr(sender, 'request') and hasattr(sender.request, 'span'):
            span = sender.request.span
            span.record_exception(exception)
            span.set_status(trace.Status(trace.StatusCode.ERROR, str(exception)))
            span.end()
    
    # Example traced task
    @app.task
    def process_article(article_id: int):
        """Process article with tracing"""
        current_span = trace.get_current_span()
        current_span.set_attribute("article.id", article_id)
        
        with traced_operation("article.fetch", {"article.id": article_id}):
            article = fetch_article(article_id)
        
        with traced_operation("article.analysis", {"article.word_count": len(article.content.split())}):
            analysis = analyze_article(article)
        
        with traced_operation("article.save", {"article.id": article_id}):
            save_analysis(article_id, analysis)
        
        return {"article_id": article_id, "status": "processed"}
  
  tracing-best-practices.md: |
    # Distributed Tracing Best Practices for Mimir
    
    ## Span Naming Conventions
    
    Use descriptive, hierarchical names:
    - `http.request.GET /api/articles`
    - `database.query.articles.select`
    - `cache.get.user_session`
    - `external_api.call.news_source`
    - `celery.task.process_article`
    
    ## Required Span Attributes
    
    ### HTTP Requests
    - `http.method`: GET, POST, PUT, DELETE
    - `http.url`: Full URL
    - `http.status_code`: Response status code
    - `http.user_agent`: Client user agent
    - `user.id`: User identifier (if available)
    
    ### Database Operations
    - `db.system`: postgresql, redis
    - `db.name`: Database name
    - `db.operation`: SELECT, INSERT, UPDATE, DELETE
    - `db.table`: Table name
    - `db.rows_affected`: Number of rows affected
    
    ### Celery Tasks
    - `celery.task.name`: Task name
    - `celery.task.id`: Task ID
    - `celery.queue`: Queue name
    - `celery.retry_count`: Number of retries
    
    ### External API Calls
    - `external.service`: Service name
    - `external.endpoint`: API endpoint
    - `external.method`: HTTP method
    - `external.status_code`: Response status
    
    ## Sampling Strategy
    
    Different sampling rates for different components:
    - High-traffic endpoints: 1-5%
    - Background tasks: 10-20%
    - Error traces: 100%
    - Admin endpoints: 50%
    
    ## Error Handling
    
    Always record exceptions and set error status:
    ```python
    try:
        result = risky_operation()
        span.set_status(trace.Status(trace.StatusCode.OK))
    except Exception as e:
        span.record_exception(e)
        span.set_status(trace.Status(trace.StatusCode.ERROR, str(e)))
        raise
    ```
    
    ## Performance Considerations
    
    - Use batch export for high-volume applications
    - Set appropriate sampling rates
    - Exclude health check and metrics endpoints
    - Use async instrumentation where possible
    - Monitor trace ingestion costs
    
    ## Security Considerations
    
    Never include in spans:
    - Passwords or API keys
    - Personal user data (PII)
    - Session tokens
    - Credit card information
    
    ## Correlation with Logs and Metrics
    
    Include trace and span IDs in logs:
    ```python
    logger.info("Processing article", extra={
        "trace_id": get_current_trace_id(),
        "span_id": get_current_span_id(),
        "article_id": article.id
    })
    ```
    
    ## Deployment Configuration
    
    Environment variables for configuration:
    - `JAEGER_ENDPOINT`: Jaeger collector endpoint
    - `OTEL_SERVICE_NAME`: Service name
    - `OTEL_SERVICE_VERSION`: Service version
    - `OTEL_TRACES_SAMPLER_ARG`: Sampling rate
    - `OTEL_EXPORTER_JAEGER_ENDPOINT`: Jaeger exporter endpoint