# Kibana Deployment for Log Visualization
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana-config
  namespace: mimir-logging
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/component: logging
data:
  kibana.yml: |
    server.name: kibana
    server.host: "0.0.0.0"
    server.port: 5601
    
    # Elasticsearch settings
    elasticsearch.hosts: ["https://elasticsearch:9200"]
    elasticsearch.username: "kibana_system"
    elasticsearch.password: "${KIBANA_PASSWORD}"
    elasticsearch.ssl.verificationMode: none
    
    # Security settings
    xpack.security.enabled: true
    xpack.encryptedSavedObjects.encryptionKey: "min-32-byte-long-strong-encryption-key"
    xpack.reporting.encryptionKey: "min-32-byte-long-strong-encryption-key"
    xpack.security.sessionTimeout: 600000  # 10 minutes
    
    # Monitoring
    monitoring.ui.container.elasticsearch.enabled: true
    monitoring.ui.container.logstash.enabled: true
    
    # Logging
    logging.dest: stdout
    logging.verbose: false
    
    # Performance
    elasticsearch.requestTimeout: 90000
    elasticsearch.shardTimeout: 60000
    
    # Features
    xpack.fleet.enabled: false
    xpack.apm.enabled: true
    
    # UI Settings
    telemetry.enabled: false
    newsfeed.enabled: false
---
apiVersion: v1
kind: Secret
metadata:
  name: kibana-credentials
  namespace: mimir-logging
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/component: logging
type: Opaque
stringData:
  username: kibana_system
  password: CHANGE_THIS_KIBANA_PASSWORD
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: mimir-logging
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/component: logging
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: kibana
      app.kubernetes.io/component: logging
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kibana
        app.kubernetes.io/component: logging
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5601"
        prometheus.io/path: "/api/stats"
    spec:
      securityContext:
        runAsUser: 1000
        runAsNonRoot: true
        fsGroup: 1000
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana:8.10.2
        imagePullPolicy: IfNotPresent
        env:
        - name: KIBANA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kibana-credentials
              key: password
        - name: SERVER_PUBLICBASEURL
          value: "https://kibana.example.com"
        ports:
        - containerPort: 5601
          name: http
          protocol: TCP
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
        readinessProbe:
          httpGet:
            path: /api/status
            port: 5601
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /api/status
            port: 5601
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /usr/share/kibana/config/kibana.yml
          subPath: kibana.yml
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: kibana-config
---
apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: mimir-logging
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/component: logging
spec:
  type: ClusterIP
  ports:
  - port: 5601
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/component: logging
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kibana
  namespace: mimir-logging
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/component: logging
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - kibana.example.com
    secretName: kibana-tls
  rules:
  - host: kibana.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kibana
            port:
              number: 5601