[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mimir"
version = "1.0.0"
description = "Professional broadcast industry news intelligence platform"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    {name = "Mimir Team"}
]
keywords = ["news", "scraper", "broadcasting", "intelligence", "media"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Other Audience",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core web framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    
    # HTTP and scraping
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    "beautifulsoup4>=4.12.0",
    "feedparser>=6.0.0",
    "lxml>=4.9.0",
    
    # Data validation and serialization
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Date/time handling
    "python-dateutil>=2.8.0",
    
    # Configuration and environment
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0",
    
    # Logging and monitoring
    "structlog>=23.2.0",
    "rich>=13.7.0",
    
    # Background tasks
    "celery>=5.3.0",
    "redis>=5.0.0",
    
    # Utilities
    "click>=8.1.0",
    "jinja2>=3.1.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",  # For testing FastAPI
    
    # Code quality
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
]

api = [
    # Optional API integrations
    "newsapi-python>=0.2.7",
    "praw>=7.7.0",
    "pytrends>=4.9.0",
]

[project.urls]
Homepage = "https://github.com/your-org/mimir"
Documentation = "https://your-org.github.io/mimir"
Repository = "https://github.com/your-org/mimir"

[project.scripts]
mimir = "mimir.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["mimir"]

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.black]
target-version = ['py311']
line-length = 100
include = '\.pyi?$'

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "feedparser.*",
    "bs4.*",
    "celery.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["mimir"]
omit = [
    "*/tests/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]