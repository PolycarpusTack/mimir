# Mimir Docker Resource Limits and Constraints
# Comprehensive resource management for different environments

# =====================================
# Development Environment Limits
# =====================================
development:
  # Database services
  postgres:
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    ulimits:
      nofile: 65536
      nproc: 4096

  redis:
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Application services
  mimir-api:
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    environment:
      - WORKERS=2
      - MAX_REQUESTS=100
    ulimits:
      nofile: 4096

  mimir-web:
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    ulimits:
      nofile: 4096

  mimir-worker:
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    environment:
      - WORKER_CONCURRENCY=2
      - WORKER_MAX_TASKS_PER_CHILD=100
    ulimits:
      nofile: 4096

  mimir-analytics:
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    ulimits:
      nofile: 4096

# =====================================
# Staging Environment Limits
# =====================================
staging:
  # Database services
  postgres:
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    ulimits:
      nofile: 65536
      nproc: 8192

  redis:
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Application services
  mimir-api:
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    environment:
      - WORKERS=3
      - MAX_REQUESTS=500
    ulimits:
      nofile: 8192

  mimir-web:
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    ulimits:
      nofile: 8192

  mimir-worker:
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    environment:
      - WORKER_CONCURRENCY=3
      - WORKER_MAX_TASKS_PER_CHILD=500
    ulimits:
      nofile: 8192

  mimir-analytics:
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    ulimits:
      nofile: 8192

# =====================================
# Production Environment Limits
# =====================================
production:
  # Database services
  postgres:
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    ulimits:
      nofile: 65536
      nproc: 16384
    sysctls:
      - net.core.somaxconn=65535
      - vm.overcommit_memory=1

  pgbouncer:
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    ulimits:
      nofile: 16384

  redis:
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    ulimits:
      nofile: 65536
    sysctls:
      - net.core.somaxconn=65535

  # Application services
  mimir-api:
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
    environment:
      - WORKERS=4
      - MAX_REQUESTS=1000
      - MAX_REQUESTS_JITTER=100
    ulimits:
      nofile: 16384
      nproc: 8192

  mimir-web:
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
    ulimits:
      nofile: 16384

  mimir-worker:
    deploy:
      replicas: 4
      resources:
        limits:
          memory: 4G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '2.0'
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 120s
    environment:
      - WORKER_CONCURRENCY=4
      - WORKER_MAX_TASKS_PER_CHILD=1000
      - WORKER_PREFETCH_MULTIPLIER=1
    ulimits:
      nofile: 16384
      nproc: 8192

  mimir-analytics:
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 4G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '2.0'
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 120s
    ulimits:
      nofile: 16384
      nproc: 8192

  # Load balancer
  nginx:
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    ulimits:
      nofile: 65536
    sysctls:
      - net.core.somaxconn=65535
      - net.ipv4.tcp_max_syn_backlog=4096

# =====================================
# Security Constraints
# =====================================
security:
  # Common security settings for all environments
  common:
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    read_only: false  # Set to true for maximum security
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m

  # Database specific security
  database:
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE
      - FOWNER
    security_opt:
      - no-new-privileges:true
      - apparmor:unconfined  # Only if AppArmor profile exists

  # Application specific security
  application:
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m
      - /app/logs:noexec,nosuid,size=500m

# =====================================
# Health Check Configurations
# =====================================
healthchecks:
  postgres:
    test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 60s

  redis:
    test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$REDIS_PASSWORD", "ping"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 30s

  api:
    test: ["CMD", "/app/config/docker/healthcheck.sh"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 60s

  web:
    test: ["CMD", "/app/config/docker/healthcheck.sh"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 60s

  worker:
    test: ["CMD", "/app/config/docker/healthcheck.sh"]
    interval: 60s
    timeout: 30s
    retries: 3
    start_period: 120s

  analytics:
    test: ["CMD", "/app/config/docker/healthcheck.sh"]
    interval: 60s
    timeout: 30s
    retries: 3
    start_period: 120s

# =====================================
# Logging Configurations
# =====================================
logging:
  development:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

  staging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "5"
      labels: "service,environment"

  production:
    driver: "syslog"
    options:
      syslog-address: "tcp://localhost:514"
      tag: "mimir-{{.Name}}"
      labels: "service,environment,version"
    # Alternative: use fluentd
    # driver: "fluentd"
    # options:
    #   fluentd-address: "localhost:24224"
    #   tag: "mimir.{{.Name}}"